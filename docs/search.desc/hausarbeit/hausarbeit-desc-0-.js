searchState.loadedDescShard("hausarbeit", 0, "Ultimate Tic Tac Toe implementation, game agents, …\nContains the Agent trait and implementations\nContains the Game struct\nContains the GeneticAlgorithm struct as well as the …\nContains the Heuristic and MiniBoardHeuristic and …\nContains code to test the runtime of the agents\nTrait representing an agent that can play Ultimate Tic Tac …\nStruct representing the information of an agent\nThe act method is called to get the agent’s move.\nContains the BenchedAgent struct\nReturns the argument unchanged.\nReturns the information of the agent\nContains the HumanAgent struct\nCalls <code>U::from(self)</code>.\nContains the MiniMaxAgent struct\nContains the MonteCarloTreeAgent struct\nCreates a new AgentInfo\nContains the RandomAgent struct\nContains the RandomStartAgent struct\nStruct representing an agent that is used to benchmark …\nStruct representing a row in the CSV file\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreates a new Row from the given AgentInfo and duration\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BenchedAgent wrapping the given agent and …\nAn Agent that allows a human player to play the game.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStarts a game with a human player.\nAn Ultimate Tic Tac Toe agent that uses the minimax …\nThe depth minimax should search to\nReturns the argument unchanged.\nReturns the best move for the current player\nThe heuristic used to evaluate the board state\nCalls <code>U::from(self)</code>.\nThe minimax algorithm\nThe quiescence search algorithm\nThe depth the quiescence search should search to\nStruct representing an agent that uses the Monte Carlo …\nStruct representing the information of a node in the tree\nStruct representing the statistics of a node in the tree\nApplies the statistics to the node\nGets the number of draws\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the board of the node\nGets the move index of the node\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGets the number of losses\nMerges this instance with another instance, adding the …\nCreates a new MonteCarloTreeAgent\nCreates a new NodeInfo\nGets the total number of games\nContains the Tree and Node structs\nCalculates the UCT value of the node\nGets the number of wins\nCreates a new NodeInfo with a move index\nStruct representing a node in a tree data structure\nStruct representing a tree data structure\nAppends a child to the node\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the children of the node\nGets the data of the node\nGets the root of the tree\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nChecks if the node is a leaf\nMaps a function over the data of the node\nCreates a new tree\nCreates a new node\nStruct representing an agent that plays randomly\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nAn agent that uses a random agent for the first <code>depth</code> …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nStruct representing a game of Ultimate Tic Tac Toe\nContains the BitBoard struct\nContains the Board and LegalBoardIterator struct\nReturns the argument unchanged.\nContains the GameResult enum\nCalls <code>U::from(self)</code>.\nCreates a new game with the provided agent.\nPlays the game until a result is reached.\nContains the Player enum\nContains the UltimateBoard struct\nStruct representing a bitboard\nIterator over the set squares in a BitBoard\nContains a BitBoard with no squares set\nReturns the index of the first set square in the board. If …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new BitBoard with the given value\nPops the first set square from the board. If no square is …\nImplementation of a 3x3 board for Tic Tac Toe\nEnum representing the symbols on the board\nEmpty square\nIterator over all possible legal boards\nPlayer::Two\nAll partial win positions for the board encoded in the …\nRows of the board in the internal representation\nAll win positions for the board encoded in the internal …\nPlayer::One\nThis represents a 3*3 board. Each char represents the …\nCheck if the center square is occupied by a player\nCheck if the game has been won\nExtracts a row from the board\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nTranslates the index in the internal representation to the …\nTranslates the human index to the index in the internal …\nGet the corners difference between the two players\nGet the edges difference between the two players\nGet the partial wins difference between the two players\nGet the positions set difference between the two players\nGet the possible moves for the board\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nSet the bit at the given index to the given player\n FOR INTERNAL USE ONLY!\nSet the unique id of the board.\nGet the key of the board\nThe unique id of the board\nEnum representing the possible game results\nReturns the argument unchanged.\nTransforms a player into a game result\nCalls <code>U::from(self)</code>.\nEnum representing the two players\nReturns the argument unchanged.\nGet the opponent of the current player\nCalls <code>U::from(self)</code>.\nGet an iterator of all players\nEnum representing the possible iterators for the board\nThe index of the center of a UltimateBoard\nThe indices of the corners of a UltimateBoard\nThe indices of the edges of a UltimateBoard\nThe possible moves for multiple boards\nNumber of squares in Ultimate Tic Tac Toe\nNumber of Zobrist values needed for the ultimate board\nAll possible partial win positions for the ultimate board\nThe possible moves for a single board\nStruct representing the ultimate board\nAll possible win positions for the ultimate board\nValues used for Zobrist hashing\nOffset of the <code>next_board_index</code> hashes in Zobrist values\nChecks if the game has been won\nReturns the argument unchanged.\nReturns the argument unchanged.\nGet the status of the boards that make up the ultimate …\nGet the boards that make up the ultimate board\nGet the current player\nGet the status of the game as a GameResult\nGet the Zobrist hash of the board\nGet the index of the next board to play on. If the next …\nGet the partial win difference for a player\nGet the possible moves for the ultimate board\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMake a move on the ultimate board\nCreate a new ultimate board using the default values\nStruct representing a genetic algorithm\nContains the FitnessFunction trait and implementations\nReturns the argument unchanged.\nContains the Gene struct\nCalls <code>U::from(self)</code>.\nContains the Mutation trait and implementations\nContains the Recombination trait and implementations\nRuns the genetic algorithm\nContains the Selection trait and implementations\nTrait representing a fitness function\nCalculates the fitness of the given genes\nContains the FullOrderingFitness struct\nPlays a game with the given genes\nStruct representing a full ordering fitness function\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nReturns the argument unchanged.\nReturns the values of the gene\nCalls <code>U::from(self)</code>.\nCreates a new gene with the given number of values\nCreates a new gene with the given number of values and …\nCreates a new gene with the given values\nTrait representing a mutation\nMutates the given gene\nMutates all the given genes\nContains the NormalDistributionMutation struct\nContains the ShiftMutation struct\nMutation that mutates a gene using a normal distribution\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCreates a new NormalDistributionMutation with the given …\nMutation that shifts the values of a gene\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait representing a recombination\nContains the OnePointCrossover struct\nRecombines the given genes\nRecombines the given genes\nContains the TwoPointCrossover struct\nRecombination that uses one point crossover\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nRecombination that uses two point crossover\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait representing a selection\nContains the RouletteWheelSelection struct\nSelects the best genes from the given genes\nSelection that selects genes using the roulette wheel …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nTrait representing a heuristic\nThe maximum value a heuristic can return\nThe minimum value a heuristic can return\nTrait representing a heuristic for small boards\nThe number of possible legal small board states\nContains the CustomHeuristic and CustomMiniBoardHeuristic …\nEvaluate the given board state\nEvaluate the given small board state\nInitialize the cache for the heuristic\nContains the MonteCarloGameSearchHeuristic struct\nContains the ParameterizedHeuristic and …\nA Heuristic that uses a custom evaluation function to …\nA MiniBoardHeuristic that uses a custom evaluation …\nContains the evaluation of all legal boards for the …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nA Heuristic that uses Monte Carlo Tree Search to evaluate …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSimulates a random game starting from the given board\nThe number of features the heuristic uses\nStruct representing a Heuristic that uses weights for the …\nStruct representing a MiniBoardHeuristic that uses weights …\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new ParameterizedHeuristic\nThe player for which the heuristic should evaluate the …\nThe weights for the features\nThe weights for the features\nCreates a new ParameterizedHeuristic with a lookup table …")